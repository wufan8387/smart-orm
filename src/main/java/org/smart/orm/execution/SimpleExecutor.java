package org.smart.orm.execution;

import com.sun.rowset.CachedRowSetImpl;
import org.smart.orm.SmartORMException;
import org.smart.orm.jdbc.ParameterTypeHandler;

import javax.sql.rowset.CachedRowSet;
import java.sql.*;

public class SimpleExecutor implements Executor {
    
    private Connection connection;
    
    private ParameterTypeHandler parameterTypeHandler;
    
    public ParameterTypeHandler getParameterTypeHandler() {
        return parameterTypeHandler;
    }
    
    public void setParameterTypeHandler(ParameterTypeHandler parameterTypeHandler) {
        this.parameterTypeHandler = parameterTypeHandler;
    }
    
    @Override
    public Connection getConnection() {
        return connection;
    }
    
    @Override
    public void setConnection(Connection connection) {
        this.connection = connection;
    }
    
    @Override
    public <T> void executeQuery(String sql, ResultHandler<T> handler, Object... args) {
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            setParameters(ps, args);
            handler.handle(ps.executeQuery());
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    @Override
    public CachedRowSet executeQuery(String sql, Object... args) {
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            setParameters(ps, args);
            ps.execute();
            ResultSet rs = ps.getResultSet();
            CachedRowSet rowSet = new CachedRowSetImpl();
            rowSet.populate(rs);
            return rowSet;
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    
    @Override
    public <T> int insert(String sql, ResultHandler<T> handler, int autoGeneratedKeys, Object...
            args) {
        try (PreparedStatement ps = connection.prepareStatement(sql, autoGeneratedKeys)) {
            setParameters(ps, args);
            int count = ps.executeUpdate();
            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                try (ResultSet rs = ps.getGeneratedKeys()) {
                    handler.handle(rs);
                }
            }
            return count;
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    
    @Override
    public int update(String sql, Object... args) {
        
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            setParameters(ps, args);
            return ps.executeUpdate();
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    @Override
    public int delete(String sql, Object... args) {
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            setParameters(ps, args);
            return ps.executeUpdate();
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    @Override
    public <T> void execute(String sql, ResultHandler<T> handler) {
        
        try (Statement stmt = connection.createStatement()) {
            
            if (stmt.execute(sql)) {
                try (ResultSet rs = stmt.getResultSet()) {
                    handler.handle(rs);
                }
            }
        } catch (SQLException ex) {
            throw new SmartORMException(ex);
        }
    }
    
    
    private void setParameters(PreparedStatement ps, Object... args) throws SQLException {
        for (int i = 0, n = args.length; i < n; i++) {
            Object arg = args[i];
            parameterTypeHandler.handle(ps, i + 1, arg);
        }
    }
    
    
}
